openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: Auth
  description: All authentication related routes
- name: Users
  description: All the user's personal app info
- name: Recipes
  description: All reciepes general info
paths:
  /register:
    post:
      tags:
      - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: User to add 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
        "409":
          description: username already exists
  /login:
    post:
      tags:
      - Auth
      summary: Login an existing user.
      description: An existing user logs in to the system.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description: User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
        "401":
          description: Authentication failed
  /logout:
    post:
      tags:
        - Auth
      summary: Log out a user from the system and delete his cookie.
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /users/favorites:
    get:
      tags:
      - Users
      summary: Return the favorite recipes that were saved by user.
      description: Get an array of recipes that were saved by a specific user.
      responses:
        "200":
          description: Data about the user's favorites recipes returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: Save a recipe in the favorites list of a user.
      description: Save recipe in the favorites list of a user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: Recipe's id which the user saved.
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved as favorite.
        "401":
          description: User is not authorized.
      security:
      - cookieAuth: []
  /users/viewed:
    get:
      tags:
      - Users
      summary: Get user's viewed recipes.
      description: Returns a list of all viewd recipes.
      responses:
        "200":
          description: Returns a list of recipes succesfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: A recipe is added to the user's viewed list.
      description: Adds a recipe to user's list of viewed recipes.
      requestBody:
        description: Recipe to add.
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: Recipe's id which the user saved.
                  example: 716429
      responses:
        "200":
          description: A new recipe has been added to user's viewed list.
        "401":
          description: User is not authorized.
      security:
      - cookieAuth: []
  /users/myRecipes:
    get:
      tags:
      - Users
      summary: Get user's recipes.
      description: Returns a list of the recipes that the user created.
      responses:
        "200":
          description: Returns a list of recipes succesfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/familyRecipes:
    get:
      tags:
      - Users
      summary: Get family user's recipes.
      description: Returns a list of the recipes that the user created.
      responses:
        "200":
          description: Returns a list of recipes succesfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FamilyRecipe'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /recipes/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Return preview details on recipe by his ID.
      description: Return preview details on recipe by his ID.
      parameters:
      - name: recipeId
        in: path
        description: Recipe's id.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: recipeId is not exists
  /recipes/myRecipe/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Return preview details on recipe by his ID.
      description: Return preview details on recipe by his ID.
      parameters:
      - name: recipeId
        in: path
        description: Recipe's id.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: recipeId is not exists
  /recipes/random:
    get:
      tags:
      - Recipes
      summary: Get 3 random recipes.
      description: Returns a list of 3 random recipe previews.
      responses:
        "200":
          description: Returns a list of recipes succesfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "204":
          description: No content to return.
  /recipes/createRecipe:
    post:
      tags:
      - Recipes
      summary: A new recipe from the client is added to the server
      description: A JSON object contains all the details about the new recipe.
      requestBody:
        description: Recipe to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
        required: true
      responses:
        "201":
          description: A new recipe has been added
        "400":
          description: Wrong input parameters
  # /recipes/search/query/{searchQuery}/amount/{num}/{cuisine}/{diet}/{intolerances}:
  #   get:
  #     tags:
  #     - Recipes
  #     summary: Get recipes from search.
  #     description: Returns a list of n recipe previews fitting the search query.
  #     parameters:
  #     - name: searchQuery
  #       in: path
  #       description: Name of recipe user wants to search for.
  #       required: true
  #       style: simple
  #       explode: false
  #       schema:
  #         type: string
  #     - name: num
  #       in: path
  #       description: Number of search results (5/10/15).
  #       required: true
  #       style: simple
  #       explode: false
  #       schema:
  #         type: string
  #     - name: cuisine
  #       in: path
  #       description: Type of cuisine.
  #       required: true
  #       style: simple
  #       explode: false
  #       schema:
  #         type: string
  #     - name: diet
  #       in: path
  #       description: Type of diet.
  #       required: true
  #       style: simple
  #       explode: false
  #       schema:
  #         type: string
  #     - name: intolerances
  #       in: path
  #       description: Food Intolerance.
  #       required: true
  #       style: simple
  #       explode: false
  #       schema:
  #         type: string
  #     responses:
  #       "200":
  #         description: Returns a list of recipes succesfully.
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/RecipePreview'
  #       "204":
  #         description: No content to return.
  /recipes/search:
    get:
      tags:
      - Recipes
      summary: Get recipes from search.
      description: Returns a list of n recipe previews fitting the search query.
      parameters:
      - name: searchQuery
        in: query
        description: Name of recipe user wants to search for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: num
        in: query
        description: Number of search results (5/10/15).
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: cuisine
        in: query
        description: Type of cuisine.
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: diet
        in: query
        description: Type of diet.
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: intolerances
        in: query
        description: Food Intolerance.
        required: false
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Returns a list of recipes succesfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "204":
          description: No content to return.
components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: my_name
        firstname:
          type: string
          description: user's first name
          example: my_first_name
        lastname:
          type: string
          description: user's last name
          example: my_last_name
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: my_name@12
        email:
          pattern: email
          type: string
          description: user's email
          example: my_name12@gmail.com
        # image-url:
        #   pattern: URL
        #   type: string
        #   description: URL for the user's image
        #   example: https://cloudinary.com/
      description: Model containing user info
    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        username: my_name
        password: my_name@12
    RecipePreview:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
    Recipe:
      type: object
      properties:
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        aggregateLikes:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegan:
          type: integer
          description: indication if the recipe is vegan. 0 if false, 1 if true
          example: 0        
        vegetarian:
          type: integer
          description: indication if the recipe is vegetarian. 0 if false, 1 if true
          example: 0
        glutenFree:
          type: integer
          description: indication if the recipe is gluten free. 0 if false, 1 if true
          example: 0
        extendedIngredients:
          type: string
          description: Recipe ingredients and quantity.
          example: 4 eggs
        analyzedInstructions:
          type: string
          description: Instructions for preparation.
          example: Prepare the dough by adding water to flour.
        servings:
          type: integer
          description: Number of servings the recipe makes.
          example: 2
      description: Model containing recipe info
    FamilyRecipe:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        ingredients:
          type: string
          description: Recipe ingredients and quantity.
          example: 4 eggs
        instructions:
          type: string
          description: Instructions for preparation.
          example: Prepare the dough by adding water to flour.
        recipeBy:
          type: string
          description: Who makes the recipe.
          example: Grandma
        whenToHave:
          type: string
          description: When is the recipe made usually.
          example: Fridays.
          
  
